#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LIBREOFFICE_VERSION="25.2.3"
LIBREOFFICE_ARCHIVE="LibreOffice_${LIBREOFFICE_VERSION}_Linux_x86-64_deb.tar.gz"
LIBREOFFICE_URL="https://download.documentfoundation.org/libreoffice/stable/${LIBREOFFICE_VERSION}/deb/x86_64/${LIBREOFFICE_ARCHIVE}"

LIBREOFFICE_DIR="${BUILD_DIR}/libreoffice"
TEMP_DIR="/tmp/libreoffice_install"
DEPS_DIR="${BUILD_DIR}/deps"

# Ubuntu 24.04 (Noble) repository URL
UBUNTU_MIRROR="http://archive.ubuntu.com/ubuntu"
UBUNTU_MAIN="${UBUNTU_MIRROR}/pool/main"
UBUNTU_UNIVERSE="${UBUNTU_MIRROR}/pool/universe"

# Required packages (we'll fetch the latest versions dynamically)
REQUIRED_PACKAGE_NAMES=(
    "libxinerama1"
    "libx11-xcb1"
    "libxrandr2"
    "libxss1"
    "libxtst6"
    "libxrender1"
    "libxi6"
    "libglib2.0-0"
    "libgtk-3-0"
    "libcairo-gobject2"
    "libdbus-glib-1-2"
    "libdbus-1-3"
    "libasound2"
)

# Function to fetch package URL from Ubuntu package index
get_package_url() {
    local package_name=$1
    local packages_url="${UBUNTU_MIRROR}/dists/noble/main/binary-amd64/Packages.gz"
    local universe_packages_url="${UBUNTU_MIRROR}/dists/noble/universe/binary-amd64/Packages.gz"

    # Try main repository first
    local package_info=$(curl -s "$packages_url" | gunzip | grep -A20 "^Package: $package_name$" | head -30)
    if [ -z "$package_info" ]; then
        # Try universe repository
        package_info=$(curl -s "$universe_packages_url" | gunzip | grep -A20 "^Package: $package_name$" | head -30)
    fi

    if [ -n "$package_info" ]; then
        local filename=$(echo "$package_info" | grep "^Filename: " | sed 's/^Filename: //')
        if [ -n "$filename" ]; then
            echo "${UBUNTU_MIRROR}/${filename}"
            return 0
        fi
    fi

    # If not found in noble, try jammy (22.04) as fallback
    local jammy_packages_url="${UBUNTU_MIRROR}/dists/jammy/main/binary-amd64/Packages.gz"
    local jammy_universe_packages_url="${UBUNTU_MIRROR}/dists/jammy/universe/binary-amd64/Packages.gz"

    # Try main repository first
    package_info=$(curl -s "$jammy_packages_url" | gunzip | grep -A20 "^Package: $package_name$" | head -30)
    if [ -z "$package_info" ]; then
        # Try universe repository
        package_info=$(curl -s "$jammy_universe_packages_url" | gunzip | grep -A20 "^Package: $package_name$" | head -30)
    fi

    if [ -n "$package_info" ]; then
        local filename=$(echo "$package_info" | grep "^Filename: " | sed 's/^Filename: //')
        if [ -n "$filename" ]; then
            echo "${UBUNTU_MIRROR}/${filename}"
            return 0
        fi
    fi

    return 1
}

# Function to download and extract a .deb package
extract_deb_package() {
    local package_name=$1
    local package_url=""

    # Get the package URL dynamically
    if ! package_url=$(get_package_url "$package_name"); then
        echo "WARNING: Could not find package URL for ${package_name}"
        return 1
    fi

    local cache_file="${CACHE_DIR}/${package_name}.deb"

    # Download if not cached
    if [ ! -f "${cache_file}" ]; then
        echo "       Downloading ${package_name}..."
        if ! curl -L -f -o "${cache_file}" "${package_url}"; then
            echo "WARNING: Failed to download ${package_name} from ${package_url}"
            return 1
        fi
    fi

    # Extract the .deb package
    local temp_extract="/tmp/${package_name}_extract"
    mkdir -p "${temp_extract}"

    cd "${temp_extract}"
    ar x "${cache_file}"

    # Extract data archive
    if [ -f data.tar.xz ]; then
        tar -xf data.tar.xz -C "${DEPS_DIR}"
    elif [ -f data.tar.gz ]; then
        tar -xzf data.tar.gz -C "${DEPS_DIR}"
    elif [ -f data.tar.lzma ]; then
        tar -xf data.tar.lzma -C "${DEPS_DIR}"
    fi

    # Clean up
    rm -rf "${temp_extract}"
    cd "${BUILD_DIR}"
}

# Install required X11 libraries manually
echo "-----> Installing required X11 libraries..."
mkdir -p "${CACHE_DIR}"
mkdir -p "${DEPS_DIR}"

for package_name in "${REQUIRED_PACKAGE_NAMES[@]}"; do
    extract_deb_package "${package_name}"
done

echo "-----> Installing LibreOffice ${LIBREOFFICE_VERSION}"

# Check if the tarball already exists in the cache
if [ -f "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}" ]; then
  echo "-----> Using cached LibreOffice tarball..."
else
  echo "-----> Downloading LibreOffice ${LIBREOFFICE_VERSION}..."
  mkdir -p "${CACHE_DIR}"

  echo "       Downloading from: ${LIBREOFFICE_URL}"
  if ! curl -L -f -o "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}" "${LIBREOFFICE_URL}"; then
    echo "ERROR: Failed to download LibreOffice from ${LIBREOFFICE_URL}"
    exit 1
  fi
fi

# Verify the downloaded file is actually a gzip file
if ! file "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}" | grep -q "gzip compressed"; then
  echo "ERROR: Downloaded file is not a valid gzip archive"
  echo "File type: $(file "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}")"
  echo "File contents preview:"
  head -n 5 "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}"
  exit 1
fi

# Create directories
mkdir -p "${LIBREOFFICE_DIR}"
mkdir -p "${TEMP_DIR}"
mkdir -p "${BUILD_DIR}/bin"

# Extract the tarball
echo "-----> Extracting LibreOffice..."
tar -xzf "${CACHE_DIR}/${LIBREOFFICE_ARCHIVE}" -C "${TEMP_DIR}"

# Find the extracted directory
EXTRACTED_DIR=$(find "${TEMP_DIR}" -maxdepth 1 -name "LibreOffice_*" -type d | head -1)

if [ -z "${EXTRACTED_DIR}" ]; then
  echo "ERROR: Could not find extracted LibreOffice directory"
  exit 1
fi

# Extract .deb packages manually (without dpkg/root)
echo "-----> Extracting LibreOffice packages..."
cd "${EXTRACTED_DIR}/DEBS"

for deb in *.deb; do
  echo "       Extracting ${deb}..."
  # Extract .deb file (which is an ar archive)
  ar x "${deb}"

  # Extract data.tar.xz (contains the actual files)
  if [ -f data.tar.xz ]; then
    tar -xf data.tar.xz -C "${LIBREOFFICE_DIR}"
    rm -f data.tar.xz
  elif [ -f data.tar.gz ]; then
    tar -xzf data.tar.gz -C "${LIBREOFFICE_DIR}"
    rm -f data.tar.gz
  fi

  # Clean up control files
  rm -f control.tar.* debian-binary
done

# Find LibreOffice installation path
echo "-----> Searching for LibreOffice binary..."
LO_PATH=$(find "${LIBREOFFICE_DIR}" -name "soffice" -type f | head -1)
if [ -z "${LO_PATH}" ]; then
  echo "ERROR: Could not find LibreOffice soffice binary"
  echo "Directory structure:"
  find "${LIBREOFFICE_DIR}" -type f -name "*soffice*" || echo "No soffice files found"
  echo "Top-level directories:"
  find "${LIBREOFFICE_DIR}" -maxdepth 2 -type d
  exit 1
fi

LO_PROGRAM_DIR=$(dirname "${LO_PATH}")
LO_INSTALL_DIR=$(dirname "${LO_PROGRAM_DIR}")

echo "-----> LibreOffice binary found at: ${LO_PATH}"
echo "-----> Program directory: ${LO_PROGRAM_DIR}"
echo "-----> Install directory: ${LO_INSTALL_DIR}"

# The LibreOffice files are already in the correct location (BUILD_DIR/libreoffice)
# We just need to ensure the structure is correct
FINAL_LO_DIR="${BUILD_DIR}/libreoffice"

# If the install directory is nested (like opt/libreoffice25.2), we need to move it up
if [[ "${LO_INSTALL_DIR}" == *"/opt/"* ]]; then
    echo "-----> Restructuring LibreOffice installation..."
    # Find the actual LibreOffice installation directory
    LO_VERSION_DIR=$(find "${LIBREOFFICE_DIR}" -path "*/opt/libreoffice*" -type d | head -1)
    if [ -n "${LO_VERSION_DIR}" ]; then
        echo "       Moving from ${LO_VERSION_DIR} to ${FINAL_LO_DIR}/libreoffice"
        mkdir -p "${FINAL_LO_DIR}"
        cp -R "${LO_VERSION_DIR}"/* "${FINAL_LO_DIR}/"
        # Update paths
        LO_PATH="${FINAL_LO_DIR}/program/soffice"
        LO_PROGRAM_DIR="${FINAL_LO_DIR}/program"
        LO_INSTALL_DIR="${FINAL_LO_DIR}"
    fi
fi

# Verify the final binary location
if [ ! -f "${LO_PATH}" ]; then
    echo "ERROR: LibreOffice binary not found at: ${LO_PATH}"
    echo "Available files in LibreOffice directory:"
    find "${FINAL_LO_DIR}" -name "*soffice*" -type f || echo "No soffice files found"
    echo "Directory structure:"
    find "${FINAL_LO_DIR}" -type d | head -10
    exit 1
fi

echo "-----> LibreOffice binary verified at: ${LO_PATH}"

# Create wrapper script
echo "-----> Creating LibreOffice wrapper..."
cat > "${BUILD_DIR}/bin/libreoffice" << EOF
#!/usr/bin/env bash
export URE_BOOTSTRAP="file://\$HOME/libreoffice/program/fundamentalrc"
export OFFICE_PROGRAM_PATH="\$HOME/libreoffice/program"
export SAL_USE_VCLPLUGIN=svp
export HOME=\${HOME:-/tmp}
export DISPLAY=\${DISPLAY:-:99}
export LD_LIBRARY_PATH="\$HOME/libreoffice/program:\$HOME/deps/usr/lib/x86_64-linux-gnu:\$HOME/deps/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"

# Ensure the binary exists
if [ ! -f "\$HOME/libreoffice/program/soffice" ]; then
    echo "ERROR: LibreOffice binary not found at \$HOME/libreoffice/program/soffice"
    echo "Available files:"
    find "\$HOME/libreoffice" -name "soffice*" -type f 2>/dev/null || echo "No soffice files found"
    exit 1
fi

exec "\$HOME/libreoffice/program/soffice" "\$@"
EOF

chmod +x "${BUILD_DIR}/bin/libreoffice"

# Create soffice alias
ln -sf "${BUILD_DIR}/bin/libreoffice" "${BUILD_DIR}/bin/soffice"

# Set up profile.d script for runtime environment
mkdir -p "${BUILD_DIR}/.profile.d"
cat > "${BUILD_DIR}/.profile.d/libreoffice.sh" << EOF
export PATH="\$PATH:\$HOME/bin"
export URE_BOOTSTRAP="file://\$HOME/libreoffice/program/fundamentalrc"
export SAL_USE_VCLPLUGIN=svp
export LD_LIBRARY_PATH="\$HOME/libreoffice/program:\$HOME/deps/usr/lib/x86_64-linux-gnu:\$HOME/deps/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
EOF

# Clean up
rm -rf "${TEMP_DIR}"

echo "-----> LibreOffice installation complete"
echo "       LibreOffice can be accessed via 'libreoffice' or 'soffice' commands"
